<?php
// „Ç∑„É≥„Éó„É´Êé•Á∂ö„ÉÜ„Çπ„Éà
// ‰Ωø„ÅÑÊñπ
// 1. Ë®≠ÂÆö„Éï„Ç°„Ç§„É´‰ΩúÊàê
// php artisan make:command ApiHealthCheck

// 2. Tinker„Åß„Éà„Éº„ÇØ„É≥ÁîüÊàê
// php artisan tinker

// # ÁÆ°ÁêÜËÄÖ„Éà„Éº„ÇØ„É≥ÂèñÂæó
// $admin = User::find(1); // ÁÆ°ÁêÜËÄÖ„É¶„Éº„Ç∂„Éº
// $adminToken = $admin->createToken('health-check')->plainTextToken;
// echo "Admin Token: " . $adminToken;

// # „É¶„Éº„Ç∂„Éº„Éà„Éº„ÇØ„É≥ÂèñÂæó  
// $user = User::find(2); // ‰∏ÄËà¨„É¶„Éº„Ç∂„Éº
// $userToken = $user->createToken('health-check')->plainTextToken;
// echo "User Token: " . $userToken;

// 3. „Éï„Ç°„Ç§„É´ÂÜÖ„ÅÆ„Éà„Éº„ÇØ„É≥„ÇíÊõ∏„ÅçÊèõ„Åà
// private $adminToken = '1|your_admin_token_here';
// private $userToken = '2|your_user_token_here';


//  Âü∫Êú¨ÂÆüË°å
// php artisan api:health-check

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;

class ApiHealthCheck extends Command
{
    protected $signature = 'api:health-check {--host=http://localhost:8000}';
    protected $description = 'Check all API endpoints health status';

    // „Åì„Åì„Å´„Éà„Éº„ÇØ„É≥„Çí„Éè„Éº„Éâ„Ç≥„Éº„Éá„Ç£„É≥„Ç∞
    private $adminToken = '1|your_admin_token_here';
    private $userToken = '2|your_user_token_here';

    public function handle()
    {
        $endpoints = [
            ['GET', '/api/books', [], 'public', 'Êõ∏Á±ç‰∏ÄË¶ßÂèñÂæó'],
            ['POST', '/api/books', [
                'title' => 'ABC„ÅÆÊú¨',
                'price' => 1000,
            ], 'public', 'ÂïÜÂìÅÁôªÈå≤'],
        ];
        // $endpoints = [
        //     // ÁÆ°ÁêÜËÄÖÁî®„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
        //     ['GET', '/api/admin/products', [], 'admin', 'ÂïÜÂìÅ‰∏ÄË¶ßÂèñÂæóÔºàÁÆ°ÁêÜËÄÖÔºâ'],
        //     ['GET', '/api/admin/products/1', [], 'admin', 'ÂïÜÂìÅË©≥Á¥∞ÂèñÂæóÔºàÁÆ°ÁêÜËÄÖÔºâ'],
        //     ['POST', '/api/admin/products/create', [
        //         'name' => 'Test Product',
        //         'price' => 1000,
        //         'description' => 'Test description'
        //     ], 'admin', 'ÂïÜÂìÅÊñ∞Ë¶è‰ΩúÊàêÔºàÁÆ°ÁêÜËÄÖÔºâ'],
        //     ['PUT', '/api/admin/products/1', [
        //         'name' => 'Updated Product',
        //         'price' => 1500
        //     ], 'admin', 'ÂïÜÂìÅÊõ¥Êñ∞ÔºàÁÆ°ÁêÜËÄÖÔºâ'],
        //     ['DELETE', '/api/admin/products/1', [], 'admin', 'ÂïÜÂìÅÂâäÈô§ÔºàÁÆ°ÁêÜËÄÖÔºâ'],
            
        //     // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„ÉÜ„Çπ„ÉàÔºàÁÆ°ÁêÜËÄÖÔºâ
        //     ['POST', '/api/admin/products/create', [
        //         'name' => '', // ÂøÖÈ†à„Éï„Ç£„Éº„É´„Éâ„ÇíÁ©∫„Å´
        //         'price' => 'invalid_price' // ÁÑ°Âäπ„Å™‰æ°Ê†º
        //     ], 'admin', '„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„ÉÜ„Çπ„ÉàÔºàÁÆ°ÁêÜËÄÖÔºâ', 422],
            
        //     // „É¶„Éº„Ç∂„ÉºÁî®„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
        //     ['GET', '/api/user/products', [], 'user', 'ÂïÜÂìÅ‰∏ÄË¶ßÂèñÂæóÔºà„É¶„Éº„Ç∂„ÉºÔºâ'],
        //     ['GET', '/api/user/profile', [], 'user', '„Éó„É≠„Éï„Ç£„Éº„É´ÂèñÂæóÔºà„É¶„Éº„Ç∂„ÉºÔºâ'],
        //     ['POST', '/api/user/favorites', [
        //         'product_id' => 1
        //     ], 'user', '„ÅäÊ∞ó„Å´ÂÖ•„ÇäËøΩÂä†Ôºà„É¶„Éº„Ç∂„ÉºÔºâ'],
            
        //     // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„ÉÜ„Çπ„ÉàÔºà„É¶„Éº„Ç∂„ÉºÔºâ
        //     ['POST', '/api/user/favorites', [
        //         'product_id' => 'invalid_id' // ÁÑ°Âäπ„Å™ID
        //     ], 'user', '„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„ÉÜ„Çπ„ÉàÔºà„É¶„Éº„Ç∂„ÉºÔºâ', 422],
            
        //     // Ë™çË®º‰∏çË¶ÅÔºàÂÖ¨ÈñãÔºâ
        //     ['GET', '/api/public/products', [], 'public', 'ÂÖ¨ÈñãÂïÜÂìÅ‰∏ÄË¶ßÂèñÂæó'],
        //     ['GET', '/api/health', [], 'public', '„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ'],
        // ];

        $host = $this->option('host');
        $results = [];
        
        $this->info("üöÄ Testing " . count($endpoints) . " endpoints...");
        $this->info("Host: {$host}\n");
        
        foreach ($endpoints as $endpoint) {
            [$method, $path, $data, $authType, $description] = array_pad($endpoint, 6, null);
            $expectedStatus = $endpoint[5] ?? null; // ÊúüÂæÖ„Åô„Çã„Çπ„ÉÜ„Éº„Çø„Çπ„Ç≥„Éº„Éâ
            
            try {
                $startTime = microtime(true);
                
                // Ë™çË®º„Éò„ÉÉ„ÉÄ„Éº„ÅÆË®≠ÂÆö
                $headers = ['Accept' => 'application/json'];
                if ($authType === 'admin' && $this->adminToken && $this->adminToken !== '1|your_admin_token_here') {
                    $headers['Authorization'] = 'Bearer ' . $this->adminToken;
                } elseif ($authType === 'user' && $this->userToken && $this->userToken !== '2|your_user_token_here') {
                    $headers['Authorization'] = 'Bearer ' . $this->userToken;
                }
                
                $response = Http::timeout(10)
                    ->withHeaders($headers)
                    ->{strtolower($method)}($host . $path, $data);
                
                $responseTime = round((microtime(true) - $startTime) * 1000, 2);
                $status = $response->status();
                $responseBody = $response->body();
                
                // JSONÂΩ¢Âºè„ÉÅ„Çß„ÉÉ„ÇØ
                $isValidJson = $this->isValidJson($responseBody);
                
                // ÊàêÂäüÂà§ÂÆö
                $success = $expectedStatus 
                    ? ($status === $expectedStatus) // ÊúüÂæÖ„Åô„Çã„Çπ„ÉÜ„Éº„Çø„Çπ„Ç≥„Éº„Éâ„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà
                    : ($status >= 200 && $status < 400); // ÈÄöÂ∏∏„ÅÆÊàêÂäüÂà§ÂÆö
                
                $results[] = [
                    'method' => $method,
                    'path' => $path,
                    'auth_type' => $authType,
                    'description' => $description,
                    'status' => $status,
                    'expected_status' => $expectedStatus,
                    'success' => $success,
                    'response_time' => $responseTime,
                    'is_json' => $isValidJson,
                    'error' => null
                ];
                
                // „É™„Ç¢„É´„Çø„Ç§„É†Ë°®Á§∫
                $this->displayResult($method, $path, $status, $responseTime, $authType, $success, $isValidJson, $expectedStatus);
                
            } catch (\Exception $e) {
                $results[] = [
                    'method' => $method,
                    'path' => $path,
                    'auth_type' => $authType,
                    'description' => $description,
                    'status' => 'ERROR',
                    'expected_status' => $expectedStatus,
                    'success' => false,
                    'response_time' => 0,
                    'is_json' => false,
                    'error' => $e->getMessage()
                ];
                
                $this->displayResult($method, $path, 'ERROR', 0, $authType, false, false, $expectedStatus, $e->getMessage());
            }
        }
        
        // „Çµ„Éû„É™„ÉºË°®Á§∫
        $this->showSummary($results);
        
        return $this->hasCriticalErrors($results) ? Command::FAILURE : Command::SUCCESS;
    }
    
    private function displayResult($method, $path, $status, $time, $authType, $success, $isJson, $expectedStatus = null, $error = null)
    {
        $authIcon = match($authType) {
            'admin' => 'üîê',
            'user' => 'üë§',
            'public' => 'üåê',
            default => '‚ùì'
        };
        
        $jsonIcon = $isJson ? '‚óã' : 'X';
        $expectedText = $expectedStatus ? " (ÊúüÂæÖ:{$expectedStatus})" : '';
        
        if ($success) {
            $this->line("<fg=green>‚úì</> {$authIcon} {$method} {$path} <fg=green>[{$status}]</>{$expectedText} JSON:{$jsonIcon} ({$time}ms)");
        } else {
            $errorMsg = $error ? " - {$error}" : '';
            if (in_array($status, [401, 403])) {
                $this->line("<fg=yellow>‚ö†</> {$authIcon} {$method} {$path} <fg=yellow>[{$status}]</>{$expectedText} JSON:{$jsonIcon} - Ë™çË®º„Ç®„É©„Éº{$errorMsg}");
            } else {
                $this->line("<fg=red>‚úó</> {$authIcon} {$method} {$path} <fg=red>[{$status}]</>{$expectedText} JSON:{$jsonIcon} - „Ç®„É©„Éº{$errorMsg}");
            }
        }
    }
    
    private function showSummary($results)
    {
        $this->newLine();
        $this->info("üìä Summary:");
        $this->line(str_repeat('=', 40));
        
        $total = count($results);
        $successful = collect($results)->where('success', true)->count();
        $failed = $total - $successful;
        $authErrors = collect($results)->whereIn('status', [401, 403])->count();
        $validationErrors = collect($results)->where('status', 422)->count();
        $validJson = collect($results)->where('is_json', true)->count();
        $avgTime = collect($results)->avg('response_time');
        
        $this->line("Total: <fg=blue>{$total}</>");
        $this->line("Success: <fg=green>{$successful}</>");
        $this->line("Failed: <fg=red>{$failed}</>");
        if ($authErrors > 0) {
            $this->line("Auth Errors: <fg=yellow>{$authErrors}</>");
        }
        if ($validationErrors > 0) {
            $this->line("Validation Errors: <fg=cyan>{$validationErrors}</>");
        }
        $this->line("Valid JSON: <fg=cyan>{$validJson}/{$total}</>");
        $this->line("Avg Time: <fg=cyan>" . round($avgTime, 2) . "ms</>");
        $this->line("Success Rate: <fg=cyan>" . round(($successful / $total) * 100, 2) . "%</>");
        
        // Ë™çË®º„Çø„Ç§„ÉóÂà•
        $authStats = collect($results)->groupBy('auth_type')->map(function ($group) {
            return $group->where('success', true)->count() . '/' . $group->count();
        });
        
        $this->newLine();
        $this->line("By Auth Type:");
        foreach ($authStats as $type => $stat) {
            $icon = match($type) {
                'admin' => 'üîê',
                'user' => 'üë§',
                'public' => 'üåê',
                default => '‚ùì'
            };
            $this->line("  {$icon} {$type}: {$stat}");
        }
        
        // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„ÉÜ„Çπ„ÉàÁµêÊûú
        if ($validationErrors > 0) {
            $this->newLine();
            $this->line("„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„ÉÜ„Çπ„Éà:");
            foreach ($results as $result) {
                if ($result['status'] === 422) {
                    $statusColor = $result['success'] ? 'green' : 'red';
                    $this->line("  <fg={$statusColor}>‚úì</> {$result['description']} [422]");
                }
            }
        }
        
        if ($failed === 0) {
            $this->newLine();
            $this->info("‚úÖ All endpoints are healthy!");
        } else {
            $this->newLine();
            $this->error("üî• Some endpoints need attention!");
        }
    }
    
    private function isValidJson($content)
    {
        if (empty($content)) return false;
        json_decode($content);
        return json_last_error() === JSON_ERROR_NONE;
    }
    
    private function hasCriticalErrors($results)
    {
        // Ë™çË®º„Ç®„É©„Éº(401,403)„Å®„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº(422)‰ª•Â§ñ„ÅÆ„Ç®„É©„Éº„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        return collect($results)
            ->where('success', false)
            ->whereNotIn('status', [401, 403, 422])
            ->count() > 0;
    }
}